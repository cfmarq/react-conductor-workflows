{"version":3,"sources":["webpack://projectstorm/react-canvas-core/webpack/universalModuleDefinition","webpack://projectstorm/react-canvas-core/webpack/bootstrap","webpack://projectstorm/react-canvas-core/external \"@projectstorm/react-canvas-core\"","webpack://projectstorm/react-canvas-core/external \"lodash\"","webpack://projectstorm/react-canvas-core/external \"react\"","webpack://projectstorm/react-canvas-core/external \"@projectstorm/geometry\"","webpack://projectstorm/react-canvas-core/./src/entities/node/NodeModel.ts","webpack://projectstorm/react-canvas-core/external \"@emotion/styled\"","webpack://projectstorm/react-canvas-core/./src/entities/port/PortModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link/LinkModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link/PointModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link/LinkWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/node/NodeWidget.tsx","webpack://projectstorm/react-canvas-core/./src/states/DragNewLinkState.ts","webpack://projectstorm/react-canvas-core/./src/states/DragDiagramItemsState.ts","webpack://projectstorm/react-canvas-core/./src/index.ts","webpack://projectstorm/react-canvas-core/./src/models/DiagramModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/label/LabelModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/label/LabelWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerFactory.tsx","webpack://projectstorm/react-canvas-core/external \"resize-observer-polyfill\"","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerFactory.tsx","webpack://projectstorm/react-canvas-core/./src/entities/port/PortWidget.tsx","webpack://projectstorm/react-canvas-core/./src/states/DefaultDiagramState.ts","webpack://projectstorm/react-canvas-core/./src/DiagramEngine.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","NodeModel","BasePositionModel","options","super","this","ports","width","height","Rectangle","getPosition","x","y","old","position","setPosition","_","forEach","port","getX","getY","event","deserialize","data","portOb","engine","getFactoryForPort","type","generateModel","registerModel","addPort","serialize","map","lookupTable","clone","remove","getLinks","link","id","getID","portID","links","values","clearPort","getName","setParent","PortModelAlignment","PortModel","reportedPosition","alignment","parentNode","parent","point","getPointForPort","getParent","maximumLinks","isFinite","numberOfLinks","size","getCenter","fireEvent","entity","Point","coords","getWidth","getHeight","getTopLeft","reportPosition","isLocked","LinkModel","BaseModel","points","PointModel","sourcePort","targetPort","renderedPaths","labels","Polygon","boundingBoxFromPoints","getTargetPort","getSourcePort","getSelectionEntities","concat","slice","length","label","labelOb","getFactoryForLabel","addLabel","target","getModel","then","model","setTargetPort","source","setSourcePort","paths","setPoints","getPoints","removeLink","getPointIndex","indexOf","getFirstPoint","getLastPoint","addLink","index","addPoint","generatePoint","push","pointModel","splice","getPortForPoint","removePoint","NodeLayerModel","LayerModel","isSvg","transformed","Error","registerListener","entityRemoved","removeNode","addModel","getNodeFactories","getModels","LinkLayerModel","getLinkFactories","LinkWidget","React","Component","props","state","sourceListener","deregister","targetListener","nextProps","prevState","reportInitialPosition","forceUpdate","prevProps","snapshot","installSource","installTarget","firstPoint","lastPoint","PeformanceWidget","serialized","diagramEngine","generateWidgetForLink","getLabels","labelModel","LabelWidget","S","Container","div","LinkLayerWidget","layer","NodeLayerWidget","getNodes","node","NodeWidget","Node","ref","createRef","ob","disconnect","listener","installSelectionListener","selectionChanged","entities","bounds","contentRect","updateDimensions","getPorts","updateCoords","getPortCoords","observe","current","className","style","top","left","generateWidgetForNode","DragNewLinkState","AbstractDisplacementState","config","allowLooseLinks","allowLinksFromLockedPorts","registerAction","Action","InputType","MOUSE_DOWN","fire","getMouseElement","createLinkModel","setSelected","eject","MOUSE_UP","canLinkToPort","repaintCanvas","portPos","zoomLevelPercentage","getZoomLevel","engineOffsetX","getOffsetX","engineOffsetY","getOffsetY","initialXRelative","initialYRelative","linkNextX","virtualDisplacementX","linkNextY","virtualDisplacementY","DragDiagramItemsState","MoveItemsState","item","initialPositions","DiagramModel","CanvasModel","addLayer","layers","activeNodeLayer","activeLinkLayer","filter","getNodeLayers","getLinkLayers","models","addNode","getActiveLinkLayer","isCreated","getActiveNodeLayer","some","removeModel","flatMap","LabelModel","offsetX","offsetY","Label","Foreign","foreignObject","findPathAndRelativePositionToRenderLabel","lengths","getRenderedPath","path","getTotalLength","labelPosition","reduce","previousValue","currentValue","pathIndex","calculateLabelPosition","found","labelDimensions","offsetWidth","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","getOptions","transform","requestAnimationFrame","canvas","getCanvas","generateReactWidget","LinkLayerFactory","AbstractReactFactory","NodeLayerFactory","PortWidget","engineListenerHandle","report","canvasReady","Toolkit","TESTING","keys","getNode","getPort","join","getExtraProps","children","DefaultDiagramState","State","childStates","SelectingState","dragCanvas","DragCanvasState","dragNewLink","dragItems","element","getActionEventBus","getModelForEvent","transitionWithEvent","DiagramEngine","CanvasEngine","maxNumberPointsPerLink","nodeFactories","FactoryBank","linkFactories","portFactories","labelFactories","setup","factoryAdded","setDiagramEngine","factoryRemoved","diagramModel","closest","nodeElement","getAttribute","getLink","getPointModel","getFactory","getType","getFactoryForLink","getFactoryForNode","selector","querySelector","getOrigin","getNodePortElement","sourceRect","getBoundingClientRect","getRelativeMousePoint","clientX","clientY","zoom","nodeRect","getNodeElement","nodes","margin","boundingBox","boundingBoxFromPolygons","getBoundingBox","nodesRect","selectedNodes","getSelectedEntities","allNodes","getBoundingNodesRect","canvasRect","canvasTopLeftPoint","nodeLayerTopLeftPoint","xFactor","clientWidth","yFactor","clientHeight","zoomFactor","setZoomLevel","nodesRectTopLeftPoint","setOffset","max"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"projectstorm/react-canvas-core\"] = factory();\n\telse\n\t\troot[\"projectstorm/react-canvas-core\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","module.exports = require(\"@projectstorm/react-canvas-core\");","module.exports = require(\"lodash\");","module.exports = require(\"react\");","module.exports = require(\"@projectstorm/geometry\");","import * as _ from 'lodash';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { PortModel } from '../port/PortModel';\nimport { LinkModel } from '../link/LinkModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeModelListener extends BaseModelListener {\n\tpositionChanged?(event: BaseEntityEvent<NodeModel>): void;\n}\n\nexport interface NodeModelGenerics extends BasePositionModelGenerics {\n\tLISTENER: NodeModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class NodeModel<G extends NodeModelGenerics = NodeModelGenerics> extends BasePositionModel<G> {\n\tprotected ports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.ports = {};\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(this.getPosition(), this.width, this.height);\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\n\t\t//also update the port co-ordinates (for make glorious speed)\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tport.setPosition(port.getX() + x - old.x, port.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\n\t\t//deserialize ports\n\t\t_.forEach(event.data.ports, (port: any) => {\n\t\t\tlet portOb = (event.engine as DiagramEngine).getFactoryForPort(port.type).generateModel({});\n\t\t\tportOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: port\n\t\t\t});\n\t\t\t// the links need these\n\t\t\tevent.registerModel(portOb);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tports: _.map(this.ports, (port) => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, (port) => {\n\t\t\t_.forEach(port.getLinks(), (link) => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].getID() === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetLink(id: string): LinkModel {\n\t\tfor (let portID in this.ports) {\n\t\t\tconst links = this.ports[portID].getLinks();\n\t\t\tif (links[id]) {\n\t\t\t\treturn links[id];\n\t\t\t}\n\t\t}\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t// clear the port from the links\n\t\tfor (let link of _.values(port.getLinks())) {\n\t\t\tlink.clearPort(port);\n\t\t}\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.getName()]) {\n\t\t\tthis.ports[port.getName()].setParent(null);\n\t\t\tdelete this.ports[port.getName()];\n\t\t}\n\t}\n\n\taddPort(port: PortModel): PortModel {\n\t\tport.setParent(this);\n\t\tthis.ports[port.getName()] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n","module.exports = require(\"@emotion/styled\");","import { NodeModel } from '../node/NodeModel';\nimport { LinkModel } from '../link/LinkModel';\nimport * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelOptions,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelListener,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\n\nexport enum PortModelAlignment {\n\tTOP = 'top',\n\tLEFT = 'left',\n\tBOTTOM = 'bottom',\n\tRIGHT = 'right'\n}\n\nexport interface PortModelListener extends BasePositionModelListener {\n\t/**\n\t * fires when it first receives positional information\n\t */\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\n}\n\nexport interface PortModelOptions extends BaseModelOptions {\n\talignment?: PortModelAlignment;\n\tmaximumLinks?: number;\n\tname: string;\n}\n\nexport interface PortModelGenerics extends BasePositionModelGenerics {\n\tOPTIONS: PortModelOptions;\n\tPARENT: NodeModel;\n\tLISTENER: PortModelListener;\n}\n\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\n\tlinks: { [id: string]: LinkModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\treportedPosition: boolean;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.links = {};\n\t\tthis.reportedPosition = false;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.links = {};\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import { PortModel } from '../port/PortModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelModel } from '../label/LabelModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { Point, Polygon, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModel,\n\tBaseModelGenerics,\n\tBaseModelListener,\n\tDeserializeEvent,\n\tModelGeometryInterface\n} from '@projectstorm/react-canvas-core';\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport interface LinkModelGenerics extends BaseModelGenerics {\n\tLISTENER: LinkModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class LinkModel<G extends LinkModelGenerics = LinkModelGenerics> extends BaseModel<G>\n\timplements ModelGeometryInterface {\n\tprotected sourcePort: PortModel | null;\n\tprotected targetPort: PortModel | null;\n\n\tprotected labels: LabelModel[];\n\tprotected points: PointModel[];\n\n\tprotected renderedPaths: SVGPathElement[];\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.points = [\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t}),\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t})\n\t\t];\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.renderedPaths = [];\n\t\tthis.labels = [];\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Polygon.boundingBoxFromPoints(\n\t\t\t_.map(this.points, (point: PointModel) => {\n\t\t\t\treturn point.getPosition();\n\t\t\t})\n\t\t);\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\tif (this.getTargetPort() && this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the first point\n\t\tif (!this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the last point\n\t\tif (!this.getTargetPort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n\t\t}\n\t\treturn super.getSelectionEntities().concat(this.points);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.points = _.map(event.data.points || [], (point) => {\n\t\t\tvar p = new PointModel({\n\t\t\t\tlink: this,\n\t\t\t\tposition: new Point(point.x, point.y)\n\t\t\t});\n\t\t\tp.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: point\n\t\t\t});\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(event.data.labels || [], (label: any) => {\n\t\t\tlet labelOb = (event.engine as DiagramEngine).getFactoryForLabel(label.type).generateModel({});\n\t\t\tlabelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: label\n\t\t\t});\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\t// these happen async, so we use the promises for these (they need to be done like this without the async keyword\n\t\t// because we need the deserailize method to finish for other methods while this happen\n\t\tif (event.data.target) {\n\t\t\tevent.getModel(event.data.targetPort).then((model: PortModel) => {\n\t\t\t\tthis.setTargetPort(model);\n\t\t\t});\n\t\t}\n\t\tif (event.data.source) {\n\t\t\tevent.getModel(event.data.sourcePort).then((model: PortModel) => {\n\t\t\t\tthis.setSourcePort(model);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetRenderedPath(): SVGPathElement[] {\n\t\treturn this.renderedPaths;\n\t}\n\n\tsetRenderedPaths(paths: SVGPathElement[]) {\n\t\tthis.renderedPaths = paths;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().getID() : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.getID() : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().getID() : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.getID() : null,\n\t\t\tpoints: _.map(this.points, (point) => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\tlabels: _.map(this.labels, (label) => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tclearPort(port: PortModel) {\n\t\tif (this.sourcePort === port) {\n\t\t\tthis.setSourcePort(null);\n\t\t} else if (this.targetPort === port) {\n\t\t\tthis.setTargetPort(null);\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].getID() === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.fireEvent({ port }, 'sourcePortChanged');\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.fireEvent({ port }, 'targetPortChanged');\n\t}\n\n\tpoint(x: number, y: number, index: number = 1): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y), index);\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tgetLabels() {\n\t\treturn this.labels;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, (point) => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(0, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel({\n\t\t\tlink: this,\n\t\t\tposition: new Point(x, y)\n\t\t});\n\t}\n}\n","import { LinkModel } from './LinkModel';\nimport {\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelOptions\n} from '@projectstorm/react-canvas-core';\n\nexport interface PointModelOptions extends Omit<BasePositionModelOptions, 'type'> {\n\tlink: LinkModel;\n}\n\nexport interface PointModelGenerics {\n\tPARENT: LinkModel;\n\tOPTIONS: PointModelOptions;\n\tLISTENER: BaseModelListener;\n}\n\nexport class PointModel<G extends PointModelGenerics = PointModelGenerics> extends BasePositionModel<\n\tG & BasePositionModelGenerics\n> {\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\ttype: 'point'\n\t\t});\n\t\tthis.parent = options.link;\n\t}\n\n\tisConnectedToPort(): boolean {\n\t\treturn this.parent.getPortForPoint(this) !== null;\n\t}\n\n\tgetLink(): LinkModel {\n\t\treturn this.getParent();\n\t}\n\n\tremove() {\n\t\t//clear references\n\t\tif (this.parent) {\n\t\t\tthis.parent.removePoint(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { NodeModel } from '../node/NodeModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface NodeLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: NodeModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class NodeLayerModel<G extends NodeLayerModelGenerics = NodeLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-nodes',\n\t\t\tisSvg: false,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof NodeModel)) {\n\t\t\tthrow new Error('Can only add nodes to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeNode(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getNodeFactories();\n\t}\n\n\tgetNodes() {\n\t\treturn this.getModels();\n\t}\n}\n","import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { LinkModel } from '../link/LinkModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface LinkLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: LinkModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class LinkLayerModel<G extends LinkLayerModelGenerics = LinkLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-links',\n\t\t\tisSvg: true,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof LinkModel)) {\n\t\t\tthrow new Error('Can only add links to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeLink(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetLinks() {\n\t\treturn this.getModels();\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getLinkFactories();\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from './LinkModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelWidget } from '../label/LabelWidget';\nimport { BaseEntityEvent, BasePositionModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../port/PortModel';\n\nexport interface LinkProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface LinkState {\n\tsourcePort: PortModel;\n\ttargetPort: PortModel;\n}\n\nexport class LinkWidget extends React.Component<LinkProps, LinkState> {\n\tsourceListener: ListenerHandle;\n\ttargetListener: ListenerHandle;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsourcePort: null,\n\t\t\ttargetPort: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tif (this.sourceListener) {\n\t\t\tthis.sourceListener.deregister();\n\t\t}\n\t\tif (this.targetListener) {\n\t\t\tthis.targetListener.deregister();\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps(nextProps: LinkProps, prevState: LinkState): LinkState {\n\t\treturn {\n\t\t\tsourcePort: nextProps.link.getSourcePort(),\n\t\t\ttargetPort: nextProps.link.getTargetPort()\n\t\t};\n\t}\n\n\tinstallTarget() {\n\t\tthis.targetListener && this.targetListener.deregister();\n\n\t\tif (!this.props.link.getTargetPort()) return;\n\t\tthis.targetListener = this.props.link.getTargetPort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tinstallSource() {\n\t\tthis.sourceListener && this.sourceListener.deregister();\n\n\t\tif (!this.props.link.getSourcePort()) return;\n\t\tthis.sourceListener = this.props.link.getSourcePort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<LinkProps>, prevState: Readonly<LinkState>, snapshot) {\n\t\tif (prevState.sourcePort !== this.state.sourcePort) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (prevState.targetPort !== this.state.targetPort) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n\t}\n\n\tcomponentDidMount(): void {\n\t\tif (this.props.link.getSourcePort()) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (this.props.link.getTargetPort()) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { link } = this.props;\n\n\t\t// only draw the link when we have reported positions\n\t\tif (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\t\tif (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//generate links\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.link} serialized={this.props.link.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g data-linkid={this.props.link.getID()}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForLink(link)}\n\t\t\t\t\t\t\t{_.map(this.props.link.getLabels(), (labelModel, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<LabelWidget\n\t\t\t\t\t\t\t\t\t\tkey={labelModel.getID()}\n\t\t\t\t\t\t\t\t\t\tengine={this.props.diagramEngine}\n\t\t\t\t\t\t\t\t\t\tlabel={labelModel}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as _ from 'lodash';\nimport { LinkWidget } from '../link/LinkWidget';\nimport { LinkLayerModel } from './LinkLayerModel';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface LinkLayerWidgetProps {\n\tlayer: LinkLayerModel;\n\tengine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Container = styled.div``;\n}\n\nexport class LinkLayerWidget extends React.Component<LinkLayerWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{\n\t\t\t\t\t//only perform these actions when we have a diagram\n\t\t\t\t\t_.map(this.props.layer.getLinks(), (link) => {\n\t\t\t\t\t\treturn <LinkWidget key={link.getID()} link={link} diagramEngine={this.props.engine} />;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as _ from 'lodash';\nimport { NodeModel } from '../node/NodeModel';\nimport { NodeWidget } from '../node/NodeWidget';\nimport { NodeLayerModel } from './NodeLayerModel';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeLayerWidgetProps {\n\tlayer: NodeLayerModel;\n\tengine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Container = styled.div``;\n}\n\nexport class NodeLayerWidget extends React.Component<NodeLayerWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{_.map(this.props.layer.getNodes(), (node: NodeModel) => {\n\t\t\t\t\treturn <NodeWidget key={node.getID()} diagramEngine={this.props.engine} node={node} />;\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeModel } from './NodeModel';\nimport { BaseEntityEvent, BaseModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport styled from '@emotion/styled';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport interface NodeProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Node = styled.div`\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n}\n\nexport class NodeWidget extends React.Component<NodeProps> {\n\tob: any;\n\tref: React.RefObject<HTMLDivElement>;\n\tlistener: ListenerHandle;\n\n\tconstructor(props: NodeProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.ob.disconnect();\n\t\tthis.ob = null;\n\n\t\tthis.listener.deregister();\n\t\tthis.listener = null;\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<NodeProps>, prevState: Readonly<any>, snapshot?: any): void {\n\t\tif (this.listener && this.props.node !== prevProps.node) {\n\t\t\tthis.listener.deregister();\n\t\t\tthis.installSelectionListener();\n\t\t}\n\t}\n\n\tinstallSelectionListener() {\n\t\tthis.listener = this.props.node.registerListener({\n\t\t\tselectionChanged: (event: BaseEntityEvent<BaseModel> & { isSelected: boolean }) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentDidMount(): void {\n\t\t// @ts-ignore\n\t\tthis.ob = new ResizeObserver((entities) => {\n\t\t\tconst bounds = entities[0].contentRect;\n\t\t\tthis.props.node.updateDimensions({ width: bounds.width, height: bounds.height });\n\n\t\t\t//now mark the links as dirty\n\t\t\t_.forEach(this.props.node.getPorts(), (port) => {\n\t\t\t\tport.updateCoords(this.props.diagramEngine.getPortCoords(port));\n\t\t\t});\n\t\t});\n\t\tthis.ob.observe(this.ref.current);\n\t\tthis.installSelectionListener();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.node} serialized={this.props.node.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<S.Node\n\t\t\t\t\t\t\tclassName=\"node\"\n\t\t\t\t\t\t\tref={this.ref}\n\t\t\t\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttop: this.props.node.getY(),\n\t\t\t\t\t\t\t\tleft: this.props.node.getX()\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForNode(this.props.node)}\n\t\t\t\t\t\t</S.Node>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import {\n\tAbstractDisplacementState,\n\tAbstractDisplacementStateEvent,\n\tAction,\n\tActionEvent,\n\tInputType\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { DiagramEngine } from '../DiagramEngine';\n\nexport interface DragNewLinkStateOptions {\n\t/**\n\t * If enabled, the links will stay on the canvas if they dont connect to a port\n\t * when dragging finishes\n\t */\n\tallowLooseLinks?: boolean;\n\t/**\n\t * If enabled, then a link can still be drawn from the port even if it is locked\n\t */\n\tallowLinksFromLockedPorts?: boolean;\n}\n\nexport class DragNewLinkState extends AbstractDisplacementState<DiagramEngine> {\n\tport: PortModel;\n\tlink: LinkModel;\n\tconfig: DragNewLinkStateOptions;\n\n\tconstructor(options: DragNewLinkStateOptions = {}) {\n\t\tsuper({ name: 'drag-new-link' });\n\n\t\tthis.config = {\n\t\t\tallowLooseLinks: true,\n\t\t\tallowLinksFromLockedPorts: false,\n\t\t\t...options\n\t\t};\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent, PortModel>) => {\n\t\t\t\t\tthis.port = this.engine.getMouseElement(event.event) as PortModel;\n\t\t\t\t\tif (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link = this.port.createLinkModel();\n\n\t\t\t\t\t// if no link is given, just eject the state\n\t\t\t\t\tif (!this.link) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link.setSelected(true);\n\t\t\t\t\tthis.link.setSourcePort(this.port);\n\t\t\t\t\tthis.engine.getModel().addLink(this.link);\n\t\t\t\t\tthis.port.reportPosition();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst model = this.engine.getMouseElement(event.event);\n\t\t\t\t\t// check to see if we connected to a new port\n\t\t\t\t\tif (model instanceof PortModel) {\n\t\t\t\t\t\tif (this.port.canLinkToPort(model)) {\n\t\t\t\t\t\t\tthis.link.setTargetPort(model);\n\t\t\t\t\t\t\tmodel.reportPosition();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.config.allowLooseLinks) {\n\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Calculates the link's far-end point position on mouse move.\n\t * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n\t * as the possible engine offset\n\t */\n\tfireMouseMoved(event: AbstractDisplacementStateEvent): any {\n\t\tconst portPos = this.port.getPosition();\n\t\tconst zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n\t\tconst engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n\t\tconst engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n\t\tconst initialXRelative = this.initialXRelative / zoomLevelPercentage;\n\t\tconst initialYRelative = this.initialYRelative / zoomLevelPercentage;\n\t\tconst linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n\t\tconst linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n\n\t\tthis.link.getLastPoint().setPosition(linkNextX, linkNextY);\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n","import { Action, ActionEvent, InputType, MoveItemsState } from '@projectstorm/react-canvas-core';\nimport * as _ from 'lodash';\nimport { PointModel } from '../entities/link/PointModel';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\n\nexport class DragDiagramItemsState extends MoveItemsState<DiagramEngine> {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst item = this.engine.getMouseElement(event.event);\n\t\t\t\t\tif (item instanceof PortModel) {\n\t\t\t\t\t\t_.forEach(this.initialPositions, (position) => {\n\t\t\t\t\t\t\tif (position.item instanceof PointModel) {\n\t\t\t\t\t\t\t\tconst link = position.item.getParent() as LinkModel;\n\n\t\t\t\t\t\t\t\t// only care about the last links\n\t\t\t\t\t\t\t\tif (link.getLastPoint() !== position.item) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (link.getSourcePort().canLinkToPort(item)) {\n\t\t\t\t\t\t\t\t\tlink.setTargetPort(item);\n\t\t\t\t\t\t\t\t\titem.reportPosition();\n\t\t\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","export * from './models/DiagramModel';\nexport * from './entities/label/LabelModel';\n\nexport * from './entities/link/LinkModel';\nexport * from './entities/link/PointModel';\nexport * from './entities/link/LinkWidget';\n\nexport * from './entities/link-layer/LinkLayerModel';\nexport * from './entities/link-layer/LinkLayerWidget';\nexport * from './entities/link-layer/LinkLayerFactory';\n\nexport * from './entities/node-layer/NodeLayerModel';\nexport * from './entities/node-layer/NodeLayerWidget';\nexport * from './entities/node-layer/NodeLayerFactory';\n\nexport * from './entities/node/NodeModel';\nexport * from './entities/node/NodeWidget';\nexport * from './entities/port/PortModel';\nexport * from './entities/port/PortWidget';\n\nexport * from './states/DefaultDiagramState';\nexport * from './states/DragDiagramItemsState';\nexport * from './states/DragNewLinkState';\n\nexport * from './DiagramEngine';\n","import * as _ from 'lodash';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { NodeModel } from '../entities/node/NodeModel';\nimport {\n\tBaseEntityEvent,\n\tBaseEntityListener,\n\tBaseModel,\n\tCanvasModel,\n\tCanvasModelGenerics,\n\tLayerModel,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { NodeLayerModel } from '../entities/node-layer/NodeLayerModel';\nimport { LinkLayerModel } from '../entities/link-layer/LinkLayerModel';\n\nexport interface DiagramListener extends BaseEntityListener {\n\tnodesUpdated?(event: BaseEntityEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEntityEvent & { link: LinkModel; isCreated: boolean }): void;\n}\n\nexport interface DiagramModelGenerics extends CanvasModelGenerics {\n\tLISTENER: DiagramListener;\n}\n\nexport class DiagramModel<G extends DiagramModelGenerics = DiagramModelGenerics> extends CanvasModel<G> {\n\tprotected activeNodeLayer: NodeLayerModel;\n\tprotected activeLinkLayer: LinkLayerModel;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.addLayer(new LinkLayerModel());\n\t\tthis.addLayer(new NodeLayerModel());\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tthis.layers = [];\n\t\tsuper.deserialize(event);\n\t}\n\n\taddLayer(layer: LayerModel): void {\n\t\tsuper.addLayer(layer);\n\t\tif (layer instanceof NodeLayerModel) {\n\t\t\tthis.activeNodeLayer = layer;\n\t\t}\n\t\tif (layer instanceof LinkLayerModel) {\n\t\t\tthis.activeLinkLayer = layer;\n\t\t}\n\t}\n\n\tgetLinkLayers(): LinkLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof LinkLayerModel;\n\t\t}) as LinkLayerModel[];\n\t}\n\n\tgetNodeLayers(): NodeLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof NodeLayerModel;\n\t\t}) as NodeLayerModel[];\n\t}\n\n\tgetActiveNodeLayer(): NodeLayerModel {\n\t\tif (!this.activeNodeLayer) {\n\t\t\tconst layers = this.getNodeLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new NodeLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeNodeLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeNodeLayer;\n\t}\n\n\tgetActiveLinkLayer(): LinkLayerModel {\n\t\tif (!this.activeLinkLayer) {\n\t\t\tconst layers = this.getLinkLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new NodeLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeLinkLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeLinkLayer;\n\t}\n\n\tgetNode(node: string): NodeModel {\n\t\tfor (const layer of this.getNodeLayers()) {\n\t\t\tconst model = layer.getModel(node);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetLink(link: string): LinkModel {\n\t\tfor (const layer of this.getLinkLayers()) {\n\t\t\tconst model = layer.getModel(link);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, (model) => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis.getActiveLinkLayer().addModel(link);\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tlink,\n\t\t\t\tisCreated: true\n\t\t\t},\n\t\t\t'linksUpdated'\n\t\t);\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis.getActiveNodeLayer().addModel(node);\n\t\tthis.fireEvent({ node, isCreated: true }, 'nodesUpdated');\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tconst removed = _.some(this.getLinkLayers(), (layer) => {\n\t\t\treturn layer.removeModel(link);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ link, isCreated: false }, 'linksUpdated');\n\t\t}\n\t}\n\n\tremoveNode(node: NodeModel) {\n\t\tconst removed = _.some(this.getNodeLayers(), (layer) => {\n\t\t\treturn layer.removeModel(node);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ node, isCreated: false }, 'nodesUpdated');\n\t\t}\n\t}\n\n\tgetLinks(): LinkModel[] {\n\t\treturn _.flatMap(this.getLinkLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n\n\tgetNodes(): NodeModel[] {\n\t\treturn _.flatMap(this.getNodeLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n}\n","import { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from '../link/LinkModel';\nimport { BaseModel, BaseModelGenerics, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface LabelModelOptions extends BaseModelOptions {\n\toffsetX?: number;\n\toffsetY?: number;\n}\n\nexport interface LabelModelGenerics extends BaseModelGenerics {\n\tPARENT: LinkModel;\n\tOPTIONS: LabelModelOptions;\n}\n\nexport class LabelModel<G extends LabelModelGenerics = LabelModelGenerics> extends BaseModel<G> {\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\toffsetX: options.offsetX || 0,\n\t\t\toffsetY: options.offsetY || 0\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.offsetX = event.data.offsetX;\n\t\tthis.options.offsetY = event.data.offsetY;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\toffsetX: this.options.offsetX,\n\t\t\toffsetY: this.options.offsetY\n\t\t};\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LabelModel } from './LabelModel';\nimport styled from '@emotion/styled';\n\nexport interface LabelWidgetProps {\n\tengine: DiagramEngine;\n\tlabel: LabelModel;\n\tindex: number;\n}\n\nnamespace S {\n\texport const Label = styled.div`\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n\n\texport const Foreign = styled.foreignObject`\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n}\n\nexport class LabelWidget extends React.Component<LabelWidgetProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\n\tconstructor(props: LabelWidgetProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentDidUpdate() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: SVGPathElement; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst link = this.props.label.getParent();\n\t\tconst lengths = link.getRenderedPath().map((path) => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (link.getLabels().length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < link.getRenderedPath().length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: link.getRenderedPath()[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = () => {\n\t\tconst found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n\t\tif (!found) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = found;\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.ref.current.offsetWidth,\n\t\t\theight: this.ref.current.offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n\t\t};\n\n\t\tthis.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n\t};\n\n\trender() {\n\t\tconst canvas = this.props.engine.getCanvas();\n\t\treturn (\n\t\t\t<S.Foreign key={this.props.label.getID()} width={canvas.offsetWidth} height={canvas.offsetHeight}>\n\t\t\t\t<S.Label ref={this.ref}>\n\t\t\t\t\t{this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({ model: this.props.label })}\n\t\t\t\t</S.Label>\n\t\t\t</S.Foreign>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateModelEvent, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkLayerModel } from './LinkLayerModel';\nimport { LinkLayerWidget } from './LinkLayerWidget';\n\nexport class LinkLayerFactory extends AbstractReactFactory<LinkLayerModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diagram-links');\n\t}\n\n\tgenerateModel(event: GenerateModelEvent): LinkLayerModel {\n\t\treturn new LinkLayerModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<LinkLayerModel>): JSX.Element {\n\t\treturn <LinkLayerWidget layer={event.model} engine={this.engine} />;\n\t}\n}\n","module.exports = require(\"resize-observer-polyfill\");","import * as React from 'react';\nimport { AbstractReactFactory, GenerateModelEvent, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeLayerModel } from './NodeLayerModel';\nimport { NodeLayerWidget } from './NodeLayerWidget';\n\nexport class NodeLayerFactory extends AbstractReactFactory<NodeLayerModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diagram-nodes');\n\t}\n\n\tgenerateModel(event: GenerateModelEvent): NodeLayerModel {\n\t\treturn new NodeLayerModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<NodeLayerModel>): JSX.Element {\n\t\treturn <NodeLayerWidget layer={event.model} engine={this.engine} />;\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { ListenerHandle, Toolkit } from '@projectstorm/react-canvas-core';\n\nexport interface PortProps {\n\tport: PortModel;\n\tengine: DiagramEngine;\n\tclassName?;\n\tstyle?;\n}\n\nexport class PortWidget extends React.Component<PortProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\tengineListenerHandle: ListenerHandle;\n\n\tconstructor(props: PortProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\treport() {\n\t\tthis.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.engineListenerHandle && this.engineListenerHandle.deregister();\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<PortProps>, prevState, snapshot?: any): void {\n\t\tif (!this.props.port.reportedPosition) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.engineListenerHandle = this.props.engine.registerListener({\n\t\t\tcanvasReady: () => {\n\t\t\t\tthis.report();\n\t\t\t}\n\t\t});\n\t\tif (this.props.engine.getCanvas()) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tgetExtraProps() {\n\t\tif (Toolkit.TESTING) {\n\t\t\tconst links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n\t\t\treturn {\n\t\t\t\t'data-links': links\n\t\t\t};\n\t\t}\n\t\treturn {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={this.props.style}\n\t\t\t\tref={this.ref}\n\t\t\t\tclassName={`port ${this.props.className || ''}`}\n\t\t\t\tdata-name={this.props.port.getName()}\n\t\t\t\tdata-nodeid={this.props.port.getNode().getID()}\n\t\t\t\t{...this.getExtraProps()}>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import { MouseEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\n\nexport class DefaultDiagramState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tdragNewLink: DragNewLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default-diagrams'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.dragNewLink = new DragNewLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragNewLink, event);\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import { NodeModel } from './entities/node/NodeModel';\nimport { PortModel } from './entities/port/PortModel';\nimport { LinkModel } from './entities/link/LinkModel';\nimport { LabelModel } from './entities/label/LabelModel';\nimport { Point, Rectangle, Polygon } from '@projectstorm/geometry';\nimport { MouseEvent } from 'react';\nimport {\n\tAbstractModelFactory,\n\tAbstractReactFactory,\n\tBaseModel,\n\tCanvasEngine,\n\tFactoryBank,\n\tToolkit\n} from '@projectstorm/react-canvas-core';\nimport { CanvasEngineListener, CanvasEngineOptions } from '@projectstorm/react-canvas-core';\nimport { DiagramModel } from './models/DiagramModel';\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends CanvasEngine<CanvasEngineListener, DiagramModel> {\n\tprotected nodeFactories: FactoryBank<AbstractReactFactory<NodeModel, DiagramEngine>>;\n\tprotected linkFactories: FactoryBank<AbstractReactFactory<LinkModel, DiagramEngine>>;\n\tprotected portFactories: FactoryBank<AbstractModelFactory<PortModel, DiagramEngine>>;\n\tprotected labelFactories: FactoryBank<AbstractReactFactory<LabelModel, DiagramEngine>>;\n\n\tmaxNumberPointsPerLink: number;\n\n\tconstructor(options: CanvasEngineOptions = {}) {\n\t\tsuper(options);\n\t\tthis.maxNumberPointsPerLink = 1000;\n\n\t\t// create banks for the different factory types\n\t\tthis.nodeFactories = new FactoryBank();\n\t\tthis.linkFactories = new FactoryBank();\n\t\tthis.portFactories = new FactoryBank();\n\t\tthis.labelFactories = new FactoryBank();\n\n\t\tconst setup = (factory: FactoryBank) => {\n\t\t\tfactory.registerListener({\n\t\t\t\tfactoryAdded: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(this);\n\t\t\t\t},\n\t\t\t\tfactoryRemoved: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(null);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tsetup(this.nodeFactories);\n\t\tsetup(this.linkFactories);\n\t\tsetup(this.portFactories);\n\t\tsetup(this.labelFactories);\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event: MouseEvent): BaseModel {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.model;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, '.port[data-name]');\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(target, '.node[data-nodeid]') as HTMLElement;\n\t\t\treturn diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, '.point[data-id]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, '[data-linkid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid'));\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, '.node[data-nodeid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getNode(element.getAttribute('data-nodeid'));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories() {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories() {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories() {\n\t\treturn this.labelFactories;\n\t}\n\n\tgetPortFactories() {\n\t\treturn this.portFactories;\n\t}\n\n\tgetFactoryForNode<F extends AbstractReactFactory<NodeModel, DiagramEngine>>(node: NodeModel | string) {\n\t\tif (typeof node === 'string') {\n\t\t\treturn this.nodeFactories.getFactory(node);\n\t\t}\n\t\treturn this.nodeFactories.getFactory(node.getType());\n\t}\n\n\tgetFactoryForLink<F extends AbstractReactFactory<LinkModel, DiagramEngine>>(link: LinkModel | string) {\n\t\tif (typeof link === 'string') {\n\t\t\treturn this.linkFactories.getFactory<F>(link);\n\t\t}\n\t\treturn this.linkFactories.getFactory<F>(link.getType());\n\t}\n\n\tgetFactoryForLabel<F extends AbstractReactFactory<LabelModel, DiagramEngine>>(label: LabelModel) {\n\t\tif (typeof label === 'string') {\n\t\t\treturn this.labelFactories.getFactory(label);\n\t\t}\n\t\treturn this.labelFactories.getFactory(label.getType());\n\t}\n\n\tgetFactoryForPort<F extends AbstractModelFactory<PortModel, DiagramEngine>>(port: PortModel) {\n\t\tif (typeof port === 'string') {\n\t\t\treturn this.portFactories.getFactory<F>(port);\n\t\t}\n\t\treturn this.portFactories.getFactory<F>(port.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element {\n\t\treturn this.getFactoryForLink(link).generateReactWidget({ model: link });\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element {\n\t\treturn this.getFactoryForNode(node).generateReactWidget({ model: node });\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot find Node Port element with nodeID: [' +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t'] and name: [' +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t']'\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel): Point {\n\t\treturn this.getPortCoords(port).getOrigin();\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(port: PortModel, element?: HTMLDivElement): Rectangle {\n\t\tif (!this.canvas) {\n\t\t\tthrow new Error('Canvas needs to be set first');\n\t\t}\n\t\tif (!element) {\n\t\t\telement = this.getNodePortElement(port);\n\t\t}\n\t\tconst sourceRect = element.getBoundingClientRect();\n\t\tconst point = this.getRelativeMousePoint({\n\t\t\tclientX: sourceRect.left,\n\t\t\tclientY: sourceRect.top\n\t\t});\n\t\tconst zoom = this.model.getZoomLevel() / 100.0;\n\t\treturn new Rectangle(point.x, point.y, sourceRect.width / zoom, sourceRect.height / zoom);\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\t/**\n\t * Get nodes bounding box coordinates with or without margin\n\t * @returns rectangle points in node layer coordinates\n\t */\n\tgetBoundingNodesRect(nodes: NodeModel[], margin?: number): Rectangle {\n\t\tif (nodes) {\n\t\t\tif (nodes.length === 0) {\n\t\t\t\treturn new Rectangle(0, 0, 0, 0);\n\t\t\t}\n\n\t\t\tlet boundingBox = Polygon.boundingBoxFromPolygons(nodes.map((node) => node.getBoundingBox()));\n\t\t\tif (margin) {\n\t\t\t\treturn new Rectangle(\n\t\t\t\t\tboundingBox.getTopLeft().x - margin,\n\t\t\t\t\tboundingBox.getTopLeft().y - margin,\n\t\t\t\t\tboundingBox.getWidth() + 2 * margin,\n\t\t\t\t\tboundingBox.getHeight() + 2 * margin\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn boundingBox;\n\t\t}\n\t}\n\n\tzoomToFitNodes(margin?: number) {\n\t\tlet nodesRect; // nodes bounding rectangle\n\t\tlet selectedNodes = this.model\n\t\t\t.getSelectedEntities()\n\t\t\t.filter((entity) => entity instanceof NodeModel)\n\t\t\t.map((node) => node) as NodeModel[];\n\n\t\t// no node selected\n\t\tif (selectedNodes.length == 0) {\n\t\t\tlet allNodes = this.model\n\t\t\t\t.getSelectionEntities()\n\t\t\t\t.filter((entity) => entity instanceof NodeModel)\n\t\t\t\t.map((node) => node) as NodeModel[];\n\n\t\t\t// get nodes bounding box with margin\n\t\t\tnodesRect = this.getBoundingNodesRect(allNodes, margin);\n\t\t} else {\n\t\t\t// get nodes bounding box with margin\n\t\t\tnodesRect = this.getBoundingNodesRect(selectedNodes, margin);\n\t\t}\n\n\t\tif (nodesRect) {\n\t\t\t// there is something we should zoom on\n\t\t\tlet canvasRect = this.canvas.getBoundingClientRect();\n\t\t\tlet canvasTopLeftPoint = {\n\t\t\t\tx: canvasRect.left,\n\t\t\t\ty: canvasRect.top\n\t\t\t};\n\t\t\tlet nodeLayerTopLeftPoint = {\n\t\t\t\tx: canvasTopLeftPoint.x + this.getModel().getOffsetX(),\n\t\t\t\ty: canvasTopLeftPoint.y + this.getModel().getOffsetY()\n\t\t\t};\n\n\t\t\tconst xFactor = this.canvas.clientWidth / nodesRect.getWidth();\n\t\t\tconst yFactor = this.canvas.clientHeight / nodesRect.getHeight();\n\t\t\tconst zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\n\t\t\tthis.model.setZoomLevel(zoomFactor * 100);\n\n\t\t\tlet nodesRectTopLeftPoint = {\n\t\t\t\tx: nodeLayerTopLeftPoint.x + nodesRect.getTopLeft().x * zoomFactor,\n\t\t\t\ty: nodeLayerTopLeftPoint.y + nodesRect.getTopLeft().y * zoomFactor\n\t\t\t};\n\n\t\t\tthis.model.setOffset(\n\t\t\t\tthis.model.getOffsetX() + canvasTopLeftPoint.x - nodesRectTopLeftPoint.x,\n\t\t\t\tthis.model.getOffsetY() + canvasTopLeftPoint.y - nodesRectTopLeftPoint.y\n\t\t\t);\n\t\t\tthis.repaintCanvas();\n\t\t}\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n}\n"],"sourceRoot":""}